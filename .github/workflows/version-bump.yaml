name: Version Bumper
permissions:
  contents: write
  pull-requests: write
on:
  workflow_dispatch:
    inputs:
      package:
        description: "Component to update"
        required: true
        type: choice
        options:
          - com.analog.codefusion.vscode
          - com.analog.codefusion.cfsutil
          - com.analog.codefusion.plugins
          - com.analog.codefusion.arm
          - com.analog.codefusion.catalog
          - com.analog.codefusion.cmake
          - com.analog.codefusion.dtc
          - com.analog.codefusion.make
          - com.analog.codefusion.msdk
          - com.analog.codefusion.openocd
          - com.analog.codefusion.python-west
          - com.analog.codefusion.riscv
          - com.analog.codefusion.zephyr
      version:
        description: "Version to bump the component to"
        required: true
        type: string
        default: ""
jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      PREV_VERSION: ${{ steps.prev-version.outputs.PREV_VERSION }}
      SHOULD_CREATE_PR: ${{ steps.check-version.outputs.SHOULD_CREATE_PR }}
      BRANCH_NAME: ${{ steps.branch-name.outputs.BRANCH_NAME }}
      PR_URL: ${{ steps.create-pr.outputs.PR_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          npm install semver@7.7.1
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      # Get today's date and write it to the github env file
      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Check if package.xml exists
      - name: Check if package.xml exists
        id: check-file
        run: |
          if [ ! -f "./packages/${{inputs.package}}/meta/package.xml" ]; then
            echo "ERROR: package.xml does not exist for ${{inputs.package}}"
            exit 1
          fi

      # Use xmllint to properly extract the version
      - name: Get previous version
        id: prev-version
        run: |
          PREV_VERSION=$(xmllint --xpath "string(//Version)" ./packages/${{inputs.package}}/meta/package.xml)
          if [ -z "$PREV_VERSION" ]; then
            echo "ERROR: Could not find Version tag in package.xml"
            exit 1
          fi
          echo "PREV_VERSION=$PREV_VERSION" >> "$GITHUB_OUTPUT"
          echo "Found previous version: $PREV_VERSION"

      # Compare versions using semver and respect the allow_downgrade flag
      - name: Compare versions
        id: check-version
        uses: actions/github-script@v7
        with:
          script: |
            const { neq, valid } = require('semver');
            const current_version = "${{ inputs.version }}";
            const previous_version ="${{ steps.prev-version.outputs.PREV_VERSION }}"

            function notEqual(v1, v2) {
              if(valid(v1) && valid(v2)) {
                return neq(v1,v2)
              } else {
                return v1 != v2
              }
            }

            if (notEqual(current_version, previous_version)) {
              core.setOutput('SHOULD_CREATE_PR', 'true');
            } else {
              console.log(`WARNING: Existing version in package.xml ${previous_version} matches specific version
              ${current_version}. No update required and no pull request will be created.`);
              core.setOutput('SHOULD_CREATE_PR', 'false');
            }

      - name: Get branch name
        id: branch-name
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          COMPONENT_NAME=$(grep -o '[^.]*$' <<< ${{ inputs.package }})
          PREV_VERSION="${{steps.prev-version.outputs.PREV_VERSION}}"

          BRANCH_NAME="bump-${COMPONENT_NAME}-${PREV_VERSION}-to-${{ inputs.version }}"

          # Ensure branch name isn't too long (GitHub has a 255 char limit)
          if [ ${#BRANCH_NAME} -gt 200 ]; then
            TRUNCATED_BRANCH_NAME="${BRANCH_NAME:0:200}"
            echo "WARNING: Branch name was too long and has been truncated"
            BRANCH_NAME="${TRUNCATED_BRANCH_NAME}"
          fi

          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "Using branch name: $BRANCH_NAME"

      - name: Check for existing branches
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const branches = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              })

              for(const branch of branches.data) {
                if(branch.name == "${{ steps.branch-name.outputs.BRANCH_NAME }}") {
                  throw new Error(`Branch ${branch.name} already exists ${branch.commit.html_url}`) 
                }
              }
            } catch(error) {
              if (error.message.includes("already exists")) {
                core.setFailed(error.message);
              } else {
                console.error("Error checking branches:", error);
                core.warning("Could not fully verify branch uniqueness due to an error");
              }
            }

      # Create a branch on this repo with the name from the user inputs
      - name: Create branch
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          git checkout -b ${{ steps.branch-name.outputs.BRANCH_NAME }}
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      # Update the version and date using xmlstarlet for safer XML manipulation
      - name: Install XML tools
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: sudo apt-get install -y xmlstarlet

      - name: Update version and date in XML
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          # Create backup
          cp ./packages/${{inputs.package}}/meta/package.xml ./packages/${{inputs.package}}/meta/package.xml.bak
          
          # Update version - targeting only the first Version tag to be safer
          xmlstarlet ed -L -u "//Version[1]" -v "${{inputs.version}}" ./packages/${{inputs.package}}/meta/package.xml

          # Update release date - targeting only the first ReleaseDate tag
          xmlstarlet ed -L -u "//ReleaseDate[1]" -v "${{env.DATE}}" ./packages/${{inputs.package}}/meta/package.xml

      # Commit changes with a generic commit message
      - name: Commit changes
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          git add ./packages/${{ inputs.package }}/meta/package.xml
          git commit -m "Update ${{ inputs.package }} to ${{ inputs.version }}"

      # Push changes to the new branch with retry logic for network issues
      - name: Push changes
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: git push origin ${{ steps.branch-name.outputs.BRANCH_NAME }}

      - name: Create pull request
        id: create-pr
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        uses: actions/github-script@v7
        with:
          # use the default GITHUB_TOKEN. this is created automatically and disposed of automatically when the job ends
          # or in 24hr whichever happens first
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
              try {
                const pr = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: "[BumpBot] ${{ inputs.package }} to version ${{ inputs.version }}",
                  head: "${{ steps.branch-name.outputs.BRANCH_NAME }}",
                  base: context.payload.repository.default_branch,
                })

                console.log(`Created new pull request: ${pr.data.html_url}`);
                core.setOutput('PR_URL', `${pr.data.html_url}`);
              } catch (error) {
                console.error("Error creating PR:", error);
                core.setFailed(`Failed to create PR: ${error.message}`);
              }

      # Manage outdated PRs with improved version comparison
      - name: Remove outdated pull requests
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { lt, valid } = require('semver');
            const currentVersion = "${{ inputs.version }}";
            const currentPackage = "${{ inputs.package }}";
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const regex = /\[BumpBot\] (.*) to version (.*)/;

 
            function lessThan(a,b) {
                if(valid(a) && valid(b)) {
                    return lt(a,b);
                }

                const a_parts = a.split('.').map(Number)
                const b_parts = b.split('.').map(Number)

                for(let i =0; i < Math.min(a_parts.length, b_parts.length); i++) {
                    if (!isNaN(a_parts[i]) && !isNaN(b_parts[i])) {
                        if (a_parts[i] < b_parts[i]) return true;
                        if (a_parts[i] > b_parts[i]) return false;
                      }
                }

                return a < b
            }

            try {
              const openPullRequests = await github.rest.pulls.list({
                owner: owner,
                repo: repo,
                state: 'open',
                per_page: 100
              });

              for (const pullRequest of openPullRequests.data) {
                const match = pullRequest.title.match(regex);
                if (match) {
                  const package = match[1];
                  const previousVersion = match[2];

                  if (lessThan(previousVersion, currentVersion) &&
                      package == currentPackage &&
                      pullRequest.html_url !== "${{ steps.create-pr.outputs.PR_URL }}"
                  ) {
                    await github.rest.issues.createComment({
                      owner: owner,
                      repo: repo,
                      issue_number: pullRequest.number,
                      body: `Closing this PR in favour of a new version bump: ${{ steps.create-pr.outputs.PR_URL }}.`
                    })

                    await github.rest.pulls.update({
                      owner: owner,
                      repo: repo,
                      pull_number: pullRequest.number,
                      state: 'closed',
                    });
                    console.log(`Pull request ${pullRequest.number} closed.`);
                  }
                }
              }
            } catch (error) {
              console.error("Error processing pull requests:", error);
              throw error;
            }