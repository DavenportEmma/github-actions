name: version bump
permissions:
  contents: write
  pull-requests: write
on:
  workflow_dispatch:
    inputs:
      package:
        description: "Component to update"
        required: true
        type: choice
        options:
          - com.analog.codefusion.arm
          - com.analog.codefusion.catalog
          - com.analog.codefusion.cfsutil
          - com.analog.codefusion.cmake
          - com.analog.codefusion.dtc
          - com.analog.codefusion.make
          - com.analog.codefusion.msdk
          - com.analog.codefusion.openocd
          - com.analog.codefusion.plugins
          - com.analog.codefusion.python-west
          - com.analog.codefusion.riscv
          - com.analog.codefusion.vscode
          - com.analog.codefusion.zephyr
      version:
        description: "Version to bump the component to"
        required: true
        type: string
        default: "1.1.1"
      branch:
        description: "Branch to bump the component on"
        required: true
        type: string
        default: "test"
jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      PREV_VERSION: ${{ steps.PREV_VERSION.outputs.PREV_VERSION }}
      SHOULD_CREATE_PR: ${{ steps.check-version.outputs.SHOULD_CREATE_PR }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install node deps
        run: npm install semver@7.7.1

      # get today's date and write it to the github env file
      - name: get current date
        id: date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # get the version tags from package.xml then retrieve the value using sed. output this to the github output file
      - name: get previous version
        id: PREV_VERSION
        run: echo "PREV_VERSION=$(grep -o "<Version>[^<]*</Version>" ./packages/${{inputs.package}}/meta/package.xml | sed 's/<Version>\(.*\)<\/Version>/\1/')" >> "$GITHUB_OUTPUT"

      # use dpkg to compare the new and the existing version
      # if the new version is higher than the existing version then run the steps
      #   create branch
      #   commit changes
      #   push changes
      #   create pull request
      #   remove outdated pull requests
      - name: compare versions
        id: check-version
        uses: actions/github-script@v7
        with:
          script: |
            const neq = require('semver/functions/neq');
            const current_version = "${{ inputs.version }}";
            const previous_version ="${{ steps.PREV_VERSION.outputs.PREV_VERSION }}"

            if (neq(current_version, previous_version)) {
              core.setOutput('SHOULD_CREATE_PR', 'true');
            } else {
              console.log(`WARNING: Existing version in package.xml ${previous_version} matches specific version
              ${current_version}. No update required and no pull request will be created.`);
              core.setOutput('SHOULD_CREATE_PR', 'false');
            }

      # create a branch on this repo with the name from the user inputs
      - name: create branch
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          git checkout -b ${{ inputs.branch }}
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      # update the value of the version tags
      - name: update version
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: sed -i -E 's|(<Version>).*?(</Version>)|\1'"${{inputs.version}}"'\2|g' ./packages/${{inputs.package}}/meta/package.xml

      # update the value of the release date tags
      - name: update date
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: sed -i -E 's|(<ReleaseDate>).*?(</ReleaseDate>)|\1'"${{env.DATE}}"'\2|g' ./packages/${{inputs.package}}/meta/package.xml

      # commit changes with a generic commit message
      - name: commit changes
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          git add ./packages/${{ inputs.package }}/meta/package.xml
          git commit -m "Update ${{ inputs.package }} to ${{ inputs.version }}"

      # push changes to the new branch
      - name: push changes
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: git push origin ${{ inputs.branch }}

      - name: create pull request
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        uses: actions/github-script@v7
        with:
          # use the default GITHUB_TOKEN. this is created automatically and disposed of automatically when the job ends
          # or in 24hr whichever happens first
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          script: |
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "[BumpBot] ${{ inputs.package }} to version ${{ inputs.version }}",
                head: "${{ inputs.branch }}",
                base: context.payload.repository.default_branch,
              })

              console.log(`Created new pull request: ${pr.data.url}`)

      # get a list of all the open pull reuqests on the repository (async so use await)
      # iterate over the list of open pull requests and use the regex to extract the version
      # if the version on the old pr is less than the new version then close the outdated pr
      - name: remove outdated pull requests
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lt = require('semver/functions/lt');
            const currentVersion = "${{ inputs.version }}";
            const currentPackage = "${{ inputs.package }}";
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const regex = /\[BumpBot\] (.*) to version (.*)/;

            try {
              const openPullRequests = await github.rest.pulls.list({
                owner: owner,
                repo: repo,
                state: 'open',
              });

              for (const pullRequest of openPullRequests.data) {
                const match = pullRequest.title.match(regex);
                if (match) {
                  const package = match[1];
                  const previousVersion = match[2];

                  if (lt(previousVersion, currentVersion) && package == currentPackage) {
                    await github.rest.pulls.update({
                      owner: owner,
                      repo: repo,
                      pull_number: pullRequest.number,
                      state: 'closed',
                    });
                    console.log(`Pull request ${pullRequest.number} closed.`);
                  }
                }
              }
            } catch (error) {
              console.error("Error processing pull requests:", error);
              throw error;
            }

