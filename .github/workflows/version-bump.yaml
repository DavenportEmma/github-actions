name: version bump
on:
  workflow_dispatch:
    inputs:
      package:
        description: "Component to update"
        required: true
        type: choice
        options:
          - com.analog.codefusion.vscode
          - com.analog.codefusion.cfsutil
          - com.analog.codefusion.plugins
          - com.analog.codefusion.catalog
          - com.analog.codefusion.zephyr
          - com.analog.codefusion.msdk
          - com.analog.codefusion.arm
          - com.analog.codefusion.riscv
          - com.analog.codefusion.make
          - com.analog.codefusion.cmake
          - com.analog.codefusion.dtc
          - com.analog.codefusion.python-west
          - com.analog.codefusion.openocd
      version:
        description: "Version to bump the component to"
        required: true
        type: string
        default: "1.1.1"
      branch:
        description: "Branch to bump the component on"
        required: true
        type: string
        default: "test"
jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      PREV_VERSION = ${{ steps.prev-version.outputs.PREV_VERSION }}
      SHOULD_CREATE_PR = ${{ steps.check-version.outputs.SHOULD_CREATE_PR }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: get current date
        id: date
        # get today's date and write it to the github env file
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: get previous version
        id: prev-version
        # get the version tags from package.xml then retrieve the value using sed. output this to the github output file
        run: echo "PREV_VERSION=$(grep -o "<Version>[^<]*</Version>" ./packages/${{inputs.package}}/meta/package.xml | sed 's/<Version>\(.*\)<\/Version>/\1/')" >> $GITHUB_OUTPUT

      - name: compare versions
        id: check-version
        run: |
          PREV_VERSION="${{ steps.prev-version.outputs.PREV_VERSION }}"
          NEW_VERSION="${{ inputs.version }}"

          if $(dpkg --compare-versions $NEW_VERSION "gt" $PREV_VERSION); then
            echo "SHOULD_CREATE_PR=true" >> $GITHUB_OUTPUT
            echo "New version $NEW_VERSION is higher than previous version $PREV_VERSION"
          else
            echo "SHOULD_CREATE_PR=false" >> $GITHUB_OUTPUT
            echo "New version $NEW_VERSION is not higher than previous version $PREV_VERSION"
          fi

      - name: create branch
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: git checkout -b ${{ inputs.branch }}

      - name: update version
        # update the value of the version tags
        run: sed -i -E 's|(<Version>).*?(</Version>)|\1'"${{inputs.version}}"'\2|g' ./packages/${{inputs.package}}/meta/package.xml

      - name: update date
        # update hte value of the release date tags
        run: sed -i -E 's|(<ReleaseDate>).*?(</ReleaseDate>)|\1'"${{env.DATE}}"'\2|g' ./packages/${{inputs.package}}/meta/package.xml

      - name: configure git
        run: |
          git config --local user.email "${secrets.ACTION_EMAIL}"
          git config --local user.name "${secrets.ACTION_NAME}"

      - name: commit changes
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: |
          git add ./packages/${{ inputs.package }}/meta/package.xml
          git commit -m "Update ${{ inputs.package }} to ${{ inputs.version }}"

      - name: push changes
        if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
        run: git push -u origin HEAD

      # - name: create pull request
      #   if: steps.check-version.outputs.SHOULD_CREATE_PR == 'true'
